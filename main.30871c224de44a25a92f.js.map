{"version":3,"sources":["webpack:///./fetchWeather.js","webpack:///./main.js","webpack:///./getGeoPosition.js"],"names":["fetchWeather","location","Promise","resolve","reject","fetch","then","response","ok","json","data","weather","icon","current","condition","temp","temp_c","humidity","wind","wind_kph","text","catch","error","PNotify","info","title","Error","refs","form","document","querySelector","section","temperature","conditions","showWeather","setAttribute","textContent","classList","remove","navigator","geolocation","getCurrentPosition","position","coords","latitude","toFixed","longitude","code","maximumAge","console","log","addEventListener","event","preventDefault","target","value"],"mappings":"2LAGeA,aAAA,SAASC,GACtB,OAAO,IAAIC,QAAQ,SAACC,EAASC,GAC3BC,MAAK,8EAC2EJ,GAE7EK,KAAK,SAAAC,GACJ,GAAIA,EAASC,GAAI,OAAOD,EAASE,SAElCH,KAAK,SAAAI,GACJ,IAAMC,EAAU,CACdC,KAAI,SAAWF,EAAKG,QAAQC,UAAUF,KACtCX,SAAUA,EACVc,KAAML,EAAKG,QAAQG,OACnBC,SAAUP,EAAKG,QAAQI,SACvBC,KAAMR,EAAKG,QAAQM,SACnBL,UAAWJ,EAAKG,QAAQC,UAAUM,MAEpCjB,EAAQQ,KAETU,MAAM,SAAAC,GACLC,IAAQC,KAAK,CACXC,MAAO,qBACPL,KAAM,eAERhB,EAAOsB,MAAM,yBCrBfC,uBAAO,CACXC,KAAMC,SAASC,cAAc,gBAC7BC,QAASF,SAASC,cAAc,YAChClB,KAAMiB,SAASC,cAAc,YAC7B7B,SAAU4B,SAASC,cAAc,+BACjCE,YAAaH,SAASC,cAAc,2BACpCb,SAAUY,SAASC,cAAc,+BACjCZ,KAAMW,SAASC,cAAc,2BAC7BG,WAAYJ,SAASC,cAAc,mCAG/BI,EAAc,SAAAvB,GAClBgB,EAAKf,KAAKuB,aAAa,MAAOxB,EAAQC,MACtCe,EAAKf,KAAKuB,aAAa,MAAOxB,EAAQG,WACtCa,EAAK1B,SAASmC,YAAczB,EAAQV,SACpC0B,EAAKK,YAAYI,YAAiBzB,EAAQI,KAA1C,IACAY,EAAKV,SAASmB,YAAiBzB,EAAQM,SAAvC,IACAU,EAAKT,KAAKkB,YAAiBzB,EAAQO,KAAnC,MACAS,EAAKM,WAAWG,YAAczB,EAAQG,UACtCa,EAAKI,QAAQM,UAAUC,OAAO,cCrBvB,IAAIpC,QAAQ,SAACC,EAASC,GACvB,gBAAiBmC,WACnBA,UAAUC,YAAYC,mBACpB,SAAAC,GACE,IAAIC,EAAYD,EAASC,OAAOC,SAASC,QACvC,GADQ,IAELH,EAASC,OAAOG,UAAUD,QAAQ,GAEvC1C,EAAQwC,IAEV,SAAArB,GACEC,IAAQC,KAAK,CACXC,MAAO,+BACPL,KAAM,4BAERhB,EAAOkB,EAAMyB,OAEf,CAAEC,WAAY,SDQnB1C,KAAK,SAAAqC,GACJ3C,EAAa2C,GACVrC,KAAK,SAAAK,GACJuB,EAAYvB,KAEbU,MAAM,SAAAC,GAAK,OAAI2B,QAAQC,IAAI5B,OAE/BD,MAAM,SAAAC,GAAK,OAAI2B,QAAQC,IAAR,eAA2B5B,KAe7CK,EAAKC,KAAKuB,iBAAiB,SAbF,SAAAC,GACvBA,EAAMC,iBACN,IAAIpD,EAAWmD,EAAME,OAAOxB,cAAc,sBAAsByB,MAE/C,KAAbtD,GACFD,EAAaC,GACVK,KAAK,SAAAK,GACJuB,EAAYvB,KAEbU,MAAM,SAAAC,GAAK,OAAI2B,QAAQC,IAAI5B","file":"main.30871c224de44a25a92f.js","sourcesContent":["import PNotify from '../node_modules/pnotify/dist/es/PNotify.js';\r\nimport PNotifyButtons from '../node_modules/pnotify/dist/es/PNotifyButtons.js';\r\n\r\nexport default function(location) {\r\n  return new Promise((resolve, reject) => {\r\n    fetch(\r\n      `https://api.apixu.com/v1/current.json?key=494f8b97550840a893864809192608&q=${location}`,\r\n    )\r\n      .then(response => {\r\n        if (response.ok) return response.json();\r\n      })\r\n      .then(data => {\r\n        const weather = {\r\n          icon: `https:${data.current.condition.icon}`,\r\n          location: location,\r\n          temp: data.current.temp_c,\r\n          humidity: data.current.humidity,\r\n          wind: data.current.wind_kph,\r\n          condition: data.current.condition.text,\r\n        };\r\n        resolve(weather);\r\n      })\r\n      .catch(error => {\r\n        PNotify.info({\r\n          title: 'Data not available',\r\n          text: 'Come later',\r\n        });\r\n        reject(Error('request failed'));\r\n      });\r\n  });\r\n}\r\n","'use strict';\r\n\r\nimport fetchWeather from './fetchWeather.js';\r\nimport getGeoPosition from './getGeoPosition.js';\r\nimport { log } from 'util';\r\n\r\nconst refs = {\r\n  form: document.querySelector('#search-form'),\r\n  section: document.querySelector('#weather'),\r\n  icon: document.querySelector('img.icon'),\r\n  location: document.querySelector('span[data-field=\"location\"]'),\r\n  temperature: document.querySelector('span[data-field=\"temp\"]'),\r\n  humidity: document.querySelector('span[data-field=\"humidity\"]'),\r\n  wind: document.querySelector('span[data-field=\"wind\"]'),\r\n  conditions: document.querySelector('span[data-field=\"conditions\"]'),\r\n};\r\n\r\nconst showWeather = weather => {\r\n  refs.icon.setAttribute('src', weather.icon);\r\n  refs.icon.setAttribute('alt', weather.condition);\r\n  refs.location.textContent = weather.location;\r\n  refs.temperature.textContent = `${weather.temp}â„ƒ`;\r\n  refs.humidity.textContent = `${weather.humidity}%`;\r\n  refs.wind.textContent = `${weather.wind}kph`;\r\n  refs.conditions.textContent = weather.condition;\r\n  refs.section.classList.remove('is-hidden');\r\n};\r\n\r\ngetGeoPosition()\r\n  .then(coords => {\r\n    fetchWeather(coords)\r\n      .then(weather => {\r\n        showWeather(weather);\r\n      })\r\n      .catch(error => console.log(error));\r\n  })\r\n  .catch(error => console.log(`error code: ${error}`));\r\n\r\nconst handleFormSubmit = event => {\r\n  event.preventDefault();\r\n  let location = event.target.querySelector('input[name=\"city\"]').value;\r\n\r\n  if (location !== '') {\r\n    fetchWeather(location)\r\n      .then(weather => {\r\n        showWeather(weather);\r\n      })\r\n      .catch(error => console.log(error));\r\n  }\r\n};\r\n\r\nrefs.form.addEventListener('submit', handleFormSubmit);\r\n","import PNotify from '../node_modules/pnotify/dist/es/PNotify.js';\r\nimport PNotifyButtons from '../node_modules/pnotify/dist/es/PNotifyButtons.js';\r\n\r\nexport default function() {\r\n  return new Promise((resolve, reject) => {\r\n    if ('geolocation' in navigator) {\r\n      navigator.geolocation.getCurrentPosition(\r\n        position => {\r\n          let coords = `${position.coords.latitude.toFixed(\r\n            4,\r\n          )},${position.coords.longitude.toFixed(4)}`;\r\n\r\n          resolve(coords);\r\n        },\r\n        error => {\r\n          PNotify.info({\r\n            title: 'Geolocation is not available',\r\n            text: 'Use search by city name',\r\n          });\r\n          reject(error.code);\r\n        },\r\n        { maximumAge: 1800000 },\r\n      );\r\n    }\r\n  });\r\n}\r\n"],"sourceRoot":""}